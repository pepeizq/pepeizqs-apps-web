@using Herramientas
@using Microsoft.AspNetCore.Components.Web;
@using Listados

<style>
	.boton-github {
		transition: transform .5s;
	}

		.boton-github:hover {
			transform: scale(1.01);
		}
</style>

<style>
	.boton-lateral {
		width: 100%;
		border: 0px;
		padding: 10px 15px;
		height: 44px;
	}
</style>

<div style="background-color: var(--fondoEntrada);">	
	<div style="display: flex; align-items: center; backdrop-filter: brightness(80%); width: 100%; padding: 50px;">
		<span style="color: var(--colorTexto);">@Idiomas.BuscarTexto(idioma, "Presentation", "Index")</span>
	</div>

	<div style="display: flex; align-items: start; padding: 50px;">
		<div style="width: 20%; padding-right: 40px;">
			<div style="border-right: 3px solid var(--fondoOscuro);">
				<div>
					@{
						string fondo = "background-color: transparent;";

						if (tipoSeleccionado == "Todos")
						{
							fondo = "background-color: var(--fondoOscuro);";
						}

						<button @onclick="@(e => CambiarProyectos(e))" class="boton-lateral" style="@fondo">
							<div style="display: flex; align-items: center; width: 100%; height: 100%;">
								<span style="color: var(--colorTexto);">@Idiomas.BuscarTexto(idioma, "All", "Index")</span>
								<span style="color: var(--colorTexto); margin-left: 10px;">(@Listados.Proyectos.Generar().Count)</span>
							</div>
						</button>
					}
				</div>

				<div style="margin-top: 15px;">
					<div>
						@{
							string fondoApp = "background-color: transparent;";

							if (tipoSeleccionado == ProyectoTipo.App.ToString())
							{
								fondoApp = "background-color: var(--fondoOscuro);";
							}

							<button @onclick="@(e => CambiarProyectos(e, ProyectoTipo.App))" class="boton-lateral" style="@fondoApp">
								<div style="display: flex; align-items: center; width: 100%; height: 100%;">
									<span style="color: var(--colorTexto);">@Idiomas.BuscarTexto(idioma, "App", "Index")</span>
									<span style="color: var(--colorTexto); margin-left: 10px;">(@LeerProyectos(ProyectoTipo.App))</span>
								</div>
							</button>
						}
					</div>

					<div>
						@{
							string fondoWeb = "background-color: transparent;";

							if (tipoSeleccionado == ProyectoTipo.Web.ToString())
							{
								fondoWeb = "background-color: var(--fondoOscuro);";
							}

							<button @onclick="@(e => CambiarProyectos(e, ProyectoTipo.Web))" class="boton-lateral" style="@fondoWeb">
								<div style="display: flex; align-items: center; width: 100%; height: 100%;">
									<span style="color: var(--colorTexto);">@Idiomas.BuscarTexto(idioma, "Web", "Index")</span>
									<span style="color: var(--colorTexto); margin-left: 10px;">(@LeerProyectos(ProyectoTipo.Web))</span>
								</div>
							</button>
						}
					</div>

					<div>
						@{
							string fondoJuego = "background-color: transparent;";

							if (tipoSeleccionado == ProyectoTipo.Juego.ToString())
							{
								fondoJuego = "background-color: var(--fondoOscuro);";
							}

							<button @onclick="@(e => CambiarProyectos(e, ProyectoTipo.Juego))" class="boton-lateral" style="@fondoJuego">
								<div style="display: flex; align-items: center; width: 100%; height: 100%;">
									<span style="color: var(--colorTexto);">@Idiomas.BuscarTexto(idioma, "Game", "Index")</span>
									<span style="color: var(--colorTexto); margin-left: 10px;">(@LeerProyectos(ProyectoTipo.Juego))</span>
								</div>
							</button>
						}
					</div>
				</div>

				<div style="margin-top: 15px;">
					@foreach (var tecnologia in tecnologias)
					{
						<div>
							@{
								string fondoTecnologia = "background-color: transparent;";

								if (tipoSeleccionado == tecnologia.Id.ToString())
								{
									fondoTecnologia = "background-color: var(--fondoOscuro);";
								}

								<button @onclick="@(e => CambiarProyectos(e, tecnologia.Id))" class="boton-lateral" style="@fondoTecnologia">
									@if (tecnologia.MostrarNombre == false)
									{
										<div style="display: flex; align-items: center; width: 100%; height: 100%;">
											<img src="/imagenes/tecnologias/@tecnologia.Imagen" style="max-height: 20px; object-fit: contain;" />
											<span style="color: var(--colorTexto); margin-left: 10px;">(@LeerProyectos(tecnologia.Id))</span>
										</div>
									}
									else
									{
										<div style="display: flex; align-items: center; width: 100%; height: 100%;">
											<img src="/imagenes/tecnologias/@tecnologia.Imagen" style="max-height: 20px; object-fit: contain;" />
											<span style="color: var(--colorTexto); margin-left: 10px;">@tecnologia.Nombre</span>
											<span style="color: var(--colorTexto); margin-left: 10px;">(@LeerProyectos(tecnologia.Id))</span>
										</div>
									}
								</button>
							}
						</div>
					}
				</div>
			</div>
		</div>
		
		<div style="width: 80%; display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 40px;">
			@{
				string enlace = string.Empty;

				foreach (var proyecto in proyectos)
				{
					if (string.IsNullOrEmpty(proyecto.Ubicacion) == true && string.IsNullOrEmpty(proyecto.Github) == false)
					{
						enlace = "https://github.com/pepeizq/" + proyecto.Github + "/";
					}
					else
					{
						enlace = proyecto.Ubicacion;
					}

					<div class="expandir" style="width: 100%; height: 100%;">
						<a href="@enlace" style="text-decoration: none; color: var(--colorTexto);">
							<div style="display: flex; flex-direction: column; height: 100%; border: 1px solid var(--colorEnlace); background-color: @proyecto.Color1;">
								<img src="/imagenes/@proyecto.Id/logo.webp" style="height: 100px; object-fit: cover; opacity: 0.5;" />
							
								<div style="padding: 20px;">
									<div style="font-size: 19px;">@proyecto.Nombre</div>
									<hr/>
									<div>@Herramientas.Idiomas.BuscarTexto(idioma, "String1", proyecto.Id)</div>
								</div>
							</div>
						</a>
					</div>
				}
			}
		</div>
	</div>
</div>

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	private List<Tecnologia> tecnologias = new List<Tecnologia>();
	private List<Proyecto> proyectos = new List<Proyecto>();
	
	private string tipoSeleccionado = string.Empty;

	protected override void OnInitialized()
	{
		tipoSeleccionado = "Todos";
		tecnologias = Listados.Tecnologias.Generar();
		proyectos = Listados.Proyectos.Generar(true);
	}

	private void CambiarProyectos(MouseEventArgs e)
	{
		tipoSeleccionado = "Todos";
		proyectos = Listados.Proyectos.Generar();
	}

	private void CambiarProyectos(MouseEventArgs e, ProyectoTipo tipo)
	{
		tipoSeleccionado = tipo.ToString();
		proyectos = Listados.Proyectos.DevolverProyectos(tipo);
	}

	private void CambiarProyectos(MouseEventArgs e, TecnologiaTipo tipo)
	{
		tipoSeleccionado = tipo.ToString();
		proyectos = Listados.Proyectos.DevolverProyectos(tipo);
	}

	private int LeerProyectos(ProyectoTipo tipo)
	{
		return Listados.Proyectos.DevolverProyectos(tipo).Count;
	}

	private int LeerProyectos(TecnologiaTipo tipo)
	{
		return Listados.Proyectos.DevolverProyectos(tipo).Count;
	}
}
